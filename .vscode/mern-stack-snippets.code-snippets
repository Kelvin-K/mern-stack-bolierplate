{
	"print log": {
		"prefix": "clog",
		"body": [
			"console.log($1);",
		],
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"instance of interface": {
		"prefix": "interface",
		"body": [
			"",
			"interface ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}",
			"{",
			"$2",
			"}",
			"",
			"export default $1;"
		],
	},
	"instance of class": {
		"prefix": "class",
		"body": [
			"",
			"class ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}",
			"{",
			"$2",
			"}",
			"",
			"export default $1;"
		],
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"constructor": {
		"prefix": "ctor",
		"body": [
			"constructor()",
			"{",
			"\t$1",
			"}"
		]
	},
	"constructor with props": {
		"prefix": "ctorp",
		"body": [
			"constructor(props:any)",
			"{",
			"\tsuper(props);",
			"\t$1",
			"}"
		]
	},
	"initialize React Class": {
		"prefix": "init",
		"body": [
			"import { DefaultProps } from '../models/defaultProps';",
			"",
			"export default function ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}(props: DefaultProps) {",
			"\treturn (",
			"\t\t<div className=\"$1\">",
			"\t\t\t$2",
			"\t\t</div>",
			"\t);",
			"}"
		]
	},
	"initialize React class with form": {
		"prefix": "initForm",
		"body": [
			"import React, { useState } from 'react';",
			"import './${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}.scss';",
			"",
			"class FormProperties {",
			"\tusername: string = \"\";",
			"}",
			"",
			"export default function $1(props: any) {",
			"\tconst [fields, setFields] = useState<FormProperties>(new FormProperties());",
			"\tconst [errors, setErrors] = useState<FormProperties>(new FormProperties());",
			"",
			"\tconst handleChange = (ev: React.ChangeEvent<HTMLInputElement>) => {",
			"\t\tsetFields(state => ({",
			"\t\t\t...state,",
			"\t\t\t[ev.target.name]: ev.target.value",
			"\t\t}));",
			"\t}",
			"",
			"\tconst submitForm = (ev: React.FormEvent<HTMLFormElement>) => {",
			"\t\tev.preventDefault();",
			"",
			"\t\tif (!fields.username) {",
			"\t\t\tsetErrors({ username: \"Invalid username.\" });",
			"\t\t}",
			"\t}",
			"",
			"\tconst renderField = (display: string, name: string, value: any, error: string) => {",
			"\t\treturn (",
			"\t\t\t<label>",
			"\t\t\t\t<div className=\"form-label\">{ display }</div>",
			"\t\t\t\t<input type=\"text\" name={ name } className=\"form-control\" value={ value } onChange={ handleChange } />",
			"\t\t\t\t<div className=\"error\">{ error }</div>",
			"\t\t\t</label>",
			"\t\t);",
			"\t}",
			"",
			"\treturn (",
			"\t\t<form className=\"$1\" onSubmit={ submitForm }>",
			"\t\t\t<div className=\"form-group\">",
			"\t\t\t\t{ renderField(\"Username :\", \"username\", fields.username, errors.username) }",
			"\t\t\t</div>",
			"\t\t\t<div className=\"form-group\">",
			"\t\t\t\t<button className=\"form-button\">Submit</button>",
			"\t\t\t</div>",
			"\t\t</form>",
			"\t);",
			"}"
		]
	},
	"initialize React Class with Redux Store": {
		"prefix": "initr",
		"body": [
			"import { connect } from 'react-redux';",
			"import { DefaultProps } from '../models/defaultProps';",
			"import { StoreDispatch, StoreState } from '../redux/store';",
			"",
			"function mapState(state: StoreState, ownProps: DefaultProps) {",
			"\treturn {",
			"\t\t...ownProps,",
			"\t};",
			"}",
			"",
			"function mapDispatch(dispatch: StoreDispatch) {",
			"\treturn {",
			"",
			"\t}",
			"}",
			"",
			"function ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}Component(props: ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>) {",
			"\treturn (",
			"\t\t<div className=\"$1\">",
			"\t\t\t$2",
			"\t\t</div>",
			"\t);",
			"}",
			"",
			"const $1 = connect(mapState, mapDispatch)($1Component);",
			"export default $1;"
		]
	},
	"redux store": {
		"prefix": "rstore",
		"body": [
			"import { configureStore } from '@reduxjs/toolkit';",
			"",
			"const store = configureStore({",
			"\treducer: {",
			"\t\t$1",
			"\t},",
			"\tmiddleware: (getDefaultMiddleware) => getDefaultMiddleware().concat([",
			"\t\t",
			"\t])",
			"});",
			"",
			"export type StoreState = ReturnType<typeof store.getState>;",
			"export type StoreDispatch = typeof store.dispatch;",
			"",
			"export default store;"
		]
	},
	"Redux Reducer": {
		"prefix": "reducer",
		"body": [
			"import { createSlice } from \"@reduxjs/toolkit\";",
			"",
			"const initialState = {",
			"",
			"}",
			"",
			"const { reducer:  ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}Reducer } = createSlice({",
			"\tname: \"$1\",",
			"\tinitialState,",
			"\treducers: {",
			"",
			"\t},",
			"\textraReducers: builder => {",
			"",
			"\t}",
			"});",
			"",
			"export default $1Reducer;",
		]
	},
	"Redux Middleware": {
		"prefix": "rmiddle",
		"body": [
			"import { Dispatch, MiddlewareAPI } from '@reduxjs/toolkit';",
			"",
			"const ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}} = (store: MiddlewareAPI) => (dispatch: Dispatch) => (action: any) => {",
			"\tconsole.log('dispatching', action);",
			"\treturn dispatch(action);",
			"}",
			"",
			"export default $1;",
		]
	},
	"express middleware": {
		"prefix": "middleware",
		"body": [
			"import { NextFunction, Request, Response } from 'express';",
			"",
			"const ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}} = (req: Request, res: Response, next: NextFunction) => {",
			"\t$2",
			"}",
			"",
			"export default $1;"
		]
	},
	"express router": {
		"prefix": "router",
		"body": [
			"import express, { NextFunction, Request, Response, Router } from \"express\";",
			"",
			"class ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}} {",
			"\trouter: Router;",
			"\tconstructor() {",
			"\t\tthis.router = express.Router();",
			"\t\tthis.router.get(\"/\", this.get$1);",
			"\t}",
			"",
			"\tget$1 = (req: Request, res: Response, next: NextFunction) => {",
			"\t\tres.status(200).send(\"You reached get $1 function\");",
			"\t}",
			"}",
			"",
			"export default $1;",
		]
	},
	"express request Half": {
		"prefix": "requestHalf",
		"body": [
			"$1 = (req: Request, res: Response) => {",
			"\t$2",
			"}"
		],
		"scope": "typescript"
	},
	"express request": {
		"prefix": "request",
		"body": [
			"$1 = (req: Request, res: Response, next: NextFunction) => {",
			"\t$2",
			"}"
		],
		"scope": "typescript"
	},
}